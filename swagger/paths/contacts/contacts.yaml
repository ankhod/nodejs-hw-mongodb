get:
  tags:
    - Contacts
  summary: Get all contacts
  operationId: getAllContacts
  description: Retrieve a list of all contacts with optional filtering and pagination.
  security:
    - bearerAuth: []
  parameters:
    - name: page
      in: query
      required: false
      schema:
        type: integer
        example: 1
        default: 1
      description: Page number for pagination
    - name: perPage
      in: query
      required: false
      schema:
        type: integer
        example: 10
        default: 10
        maximum: 100
      description: Number of contacts per page
    - name: sortBy
      in: query
      required: false
      schema:
        type: string
        example: 'name'
        default: 'name'
      description: Field to sort by
    - name: sortOrder
      in: query
      required: false
      schema:
        type: string
        enum: [asc, desc]
        example: 'asc'
        default: 'asc'
      description: Sort order
    - name: type
      in: query
      required: false
      schema:
        type: string
        example: 'personal'
      description: Filter by contact type
    - name: isFavourite
      in: query
      required: false
      schema:
        type: boolean
        example: true
      description: Filter by favorite status
  responses:
    '200':
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              message:
                type: string
                example: 'Successfully found contacts!'
              data:
                type: object
                properties:
                  total:
                    type: integer
                    example: 50
                  page:
                    type: integer
                    example: 1
                  perPage:
                    type: integer
                    example: 10
                  contacts:
                    type: array
                    items:
                      $ref: '../../../docs/openapi.yaml#/components/schemas/Contact'
    '404':
      description: No contacts found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              message:
                type: string
                example: 'No contacts found'
post:
  tags:
    - Contacts
  summary: Create a new contact
  operationId: createContact
  description: Create a new contact with the provided data.
  security:
    - bearerAuth: []
  requestBody:
    required: true
    content:
      multipart/form-data:
        schema:
          type: object
          properties:
            name:
              type: string
              example: 'John Doe'
            phoneNumber:
              type: string
              example: '+380XXXXXXXXX'
            email:
              type: string
              example: 'john@example.com'
            isFavourite:
              type: boolean
              example: false
            contactType:
              type: string
              example: 'personal'
            photo:
              type: string
              format: binary
              nullable: true
              description: Contact photo (optional)
          required:
            - name
            - phoneNumber
            - email
  responses:
    '201':
      description: Contact created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 201
              message:
                type: string
                example: 'Successfully created a contact!'
              data:
                $ref: '../../../docs/openapi.yaml#/components/schemas/Contact'
    '400':
      description: Invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              message:
                type: string
                example: 'Invalid input data'
